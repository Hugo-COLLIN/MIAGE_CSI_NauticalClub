@startuml
actor Client as C
actor "Moniteur" as M
actor "Propriétaire" as P
actor "Gestionnaire du système" as A
participant "SYSTEME" as App
participant "Base de donnees" as DB
participant ":Matériel" as Mat
participant ":Cours" as Cour
participant ":Forfait" as Forf
participant ":Camping" as Camp
participant ":Paiement" as Pay

title Workflow général de l'application du club nautique

' --- Création de compte ---
A -> App : Créer un compte
activate A
activate App
App -> DB : enregistrerNouveauCompte(utilisateur): booleen
activate DB
DB --> App
deactivate DB
App --> A : Confirmation de création de compte
deactivate App
deactivate A

/'
alt Inscription par le Moniteur
    M -> App : Indiquer affiliation à un camping partenaire
else Inscription par le Propriétaire
    P -> App : Indiquer affiliation à un camping partenaire
end
'/

' --- Authentification ---
alt Se connecter comme "Moniteur"
    M -> App : Se connecter
    activate M
    activate App
else Se connecter comme "Propriétaire"
    P -> App : Se connecter
    activate P
end

App -> DB : verifierInformationsAuthentification()
activate DB
DB --> App : informationsVerifiees
deactivate DB

alt Se connecter comme "Moniteur"
    App --> M : Connexion réussie
    deactivate M
else Se connecter comme "Propriétaire"
    App --> P : Connexion réussie
    deactivate P
    deactivate App
end

' --- Inscription à un cours ---
alt Inscription par le Moniteur
    M -> App : S'inscrire à un cours (niveau, forfait choisi)
    activate M
    activate App
else Inscription par le Propriétaire
    P -> App : S'inscrire à un cours (niveau, forfait choisi)
    activate P
end

activate App

App -> DB : demanderListeCoursDisponibles()
activate DB
DB --> App : coursDisponibles
deactivate DB

alt Inscription par le Moniteur
    App -> M : Afficher les cours disponibles
    M -> App : Sélectionner un cours (date, horaire)
else Inscription par le Propriétaire
    App -> P : Afficher les cours disponibles
    P -> App : Sélectionner un cours (date, horaire)
end

App -> Mat : verifierDisponibiliteMoniteurEtMateriel()
activate Mat
Mat -> DB : verifierStatutMateriel(coursId): booleen
activate DB
DB --> Mat : statutMateriel
deactivate DB
Mat --> DB : verifierStatutMoniteur(coursId): booleen
activate DB
DB --> Mat : statutMoniteur
deactivate DB
Mat --> App : disponibiliteMoniteurEtMateriel
deactivate Mat

/'
DB -> Camp : verifierAffiliation()
activate Camp
Camp --> DB : calculerRemiseCamping(): pourcentage
deactivate Camp
'/

App -> Forf : calculerPrixForfait(coursId, remise): montant
activate Forf
Forf --> App : montantForfait
deactivate Forf

App -> Pay : initialiserPaiement(montant, remise): transactionPaiement
activate Pay
Pay --> C : Demander la saisie des informations de paiement
activate C
C --> Pay : Saisir les informations de paiement
deactivate C
Pay --> App : validationPaiement
deactivate Pay

alt Inscription par le Moniteur
    App -> M : Paiement validé
else Inscription par le Propriétaire
    App -> P : Paiement validé
end

App -> DB : enregistrerInscription()
activate DB
DB -> Mat : reserverMateriel(coursId): reservationMateriel
activate Mat
Mat --> DB : confirmationReservationMateriel
deactivate Mat
DB --> App : confirmationEnregistrementInscription
deactivate DB

alt Inscription par le Moniteur
    App -> M : Notifier le moniteur (détails du cours)
else Inscription par le Propriétaire
    App -> P : Notifier le propriétaire (détails du cours)
end

App -> P : Envoyer rapport de l'inscription
activate P
P --> App : Accusé de réception
deactivate P

alt Inscription par le Moniteur
    App --> M : Envoyer confirmation d'inscription (détails cours, remise, reçu)
    deactivate M
else Inscription par le Propriétaire
    App --> P : Envoyer confirmation d'inscription (détails cours, remise, reçu)
    deactivate App
    deactivate P
end
@enduml
