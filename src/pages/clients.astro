---
---
<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gestion des Clients</title>
  <style>
      .container {
          max-width: 1200px;
          margin: 0 auto;
          padding: 20px;
      }
      .client-form {
          margin-bottom: 30px;
          padding: 20px;
          border: 1px solid #ddd;
          border-radius: 5px;
      }
      .form-group {
          margin-bottom: 15px;
      }
      .form-group label {
          display: block;
          margin-bottom: 5px;
      }
      .form-group input {
          width: 100%;
          padding: 8px;
          border: 1px solid #ddd;
          border-radius: 4px;
      }
      .clients-table {
          width: 100%;
          border-collapse: collapse;
      }
      .clients-table th, .clients-table td {
          padding: 10px;
          border: 1px solid #ddd;
          text-align: left;
      }
      .clients-table th {
          background-color: #f5f5f5;
      }
      .btn {
          padding: 8px 15px;
          border: none;
          border-radius: 4px;
          cursor: pointer;
      }
      .btn-primary {
          background-color: #007bff;
          color: white;
      }
      .btn-danger {
          background-color: #dc3545;
          color: white;
      }
      .btn-warning {
          background-color: #ffc107;
          color: black;
      }
      .error {
          color: red;
          margin-top: 10px;
      }
      .success {
          color: green;
          margin-top: 10px;
      }
  </style>
</head>
<body>
<div class="container">
  <h1>Gestion des Clients</h1>

  <div class="client-form">
    <h2>Ajouter/Modifier un Client</h2>
    <form id="clientForm">
      <input type="hidden" id="clientId">
      <div class="form-group">
        <label for="nom">Nom</label>
        <input type="text" id="nom" name="nom" required maxlength="30">
      </div>
      <div class="form-group">
        <label for="prenom">Prénom</label>
        <input type="text" id="prenom" name="prenom" required maxlength="30">
      </div>
      <div class="form-group">
        <label for="email">Email</label>
        <input type="email" id="email" name="email" required maxlength="50">
      </div>
      <div class="form-group">
        <label for="telephone">Téléphone</label>
        <input type="tel"
               id="telephone"
               name="telephone"
               required
               title="Format: 0XXXXXXXXX ou +XXX... (format international)"
               placeholder="0XXXXXXXXX ou +XXX...">
      </div>
      <div class="form-group">
        <label for="piece_identite">Pièce d'identité</label>
        <input type="text" id="piece_identite" name="piece_identite" maxlength="50">
      </div>
      <div class="form-group">
        <label for="id_camping">ID Camping (optionnel)</label>
        <input type="number" id="id_camping" name="id_camping">
      </div>
      <button type="submit" class="btn btn-primary">Enregistrer</button>
      <div id="formError" class="error"></div>
      <div id="formSuccess" class="success"></div>
    </form>
  </div>

  <div class="clients-list">
    <h2>Liste des Clients</h2>
    <table class="clients-table">
      <thead>
      <tr>
        <th>Nom</th>
        <th>Prénom</th>
        <th>Email</th>
        <th>Téléphone</th>
        <th>Pièce d'identité</th>
        <th>Camping</th>
        <th>Actions</th>
      </tr>
      </thead>
      <tbody id="clientsTableBody">
      </tbody>
    </table>
  </div>
</div>

<script>
  let clients = [];
  const clientForm = document.getElementById('clientForm');
  const clientsTableBody = document.getElementById('clientsTableBody');

  // Charger les clients
  async function loadClients() {
    try {
      const response = await fetch('/api/clients');
      const data = await response.json();
      clients = data;
      renderClientsTable();
    } catch (error) {
      console.error('Erreur lors du chargement des clients:', error);
    }
  }

  // Afficher les clients dans le tableau
  function renderClientsTable() {
    clientsTableBody.innerHTML = clients.map(client => `
      <tr>
          <td>${client.nom}</td>
          <td>${client.prenom}</td>
          <td>${client.email}</td>
          <td>${client.telephone}</td>
          <td>${client.piece_identite || '-'}</td>
          <td>${client.id_camping || '-'}</td>
          <td>
              <button data-id="${client.id_client}" class="btn btn-warning edit-btn">Modifier</button>
              <button data-id="${client.id_client}" class="btn btn-danger delete-btn">Supprimer</button>
          </td>
      </tr>
    `).join('');

    // Ajouter les écouteurs d'événements après avoir rendu le tableau
    document.querySelectorAll('.edit-btn').forEach(button => {
      button.addEventListener('click', function() {
        editClient(parseInt(this.dataset.id));
      });
    });

    document.querySelectorAll('.delete-btn').forEach(button => {
      button.addEventListener('click', function() {
        deleteClient(parseInt(this.dataset.id));
      });
    });
  }


  // Éditer un client
  function editClient(id) {
    const client = clients.find(c => c.id_client === id);
    if (client) {
      document.getElementById('clientId').value = client.id_client;
      document.getElementById('nom').value = client.nom;
      document.getElementById('prenom').value = client.prenom;
      document.getElementById('email').value = client.email;
      document.getElementById('telephone').value = client.telephone;
      document.getElementById('piece_identite').value = client.piece_identite || '';
      document.getElementById('id_camping').value = client.id_camping || '';
    }
  }

  // Supprimer un client
  async function deleteClient(id) {
    if (confirm('Êtes-vous sûr de vouloir supprimer ce client ?')) {
      try {
        const response = await fetch(`/api/clients/${id}`, {
          method: 'DELETE'
        });
        if (response.ok) {
          await loadClients();
        } else {
          alert('Erreur lors de la suppression du client');
        }
      } catch (error) {
        console.error('Erreur:', error);
      }
    }
  }

  // Gérer la soumission du formulaire
  clientForm.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = {
      nom: document.getElementById('nom').value,
      prenom: document.getElementById('prenom').value,
      email: document.getElementById('email').value,
      telephone: document.getElementById('telephone').value,
      piece_identite: document.getElementById('piece_identite').value || null,
      id_camping: document.getElementById('id_camping').value || null
    };

    const clientId = document.getElementById('clientId').value;
    const method = clientId ? 'PUT' : 'POST';
    const url = clientId ? `/api/clients/${clientId}` : '/api/clients';

    try {
      const response = await fetch(url, {
        method: method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (response.ok) {
        document.getElementById('formSuccess').textContent = 'Client enregistré avec succès';
        clientForm.reset();
        document.getElementById('clientId').value = '';
        await loadClients();
        setTimeout(() => {
          document.getElementById('formSuccess').textContent = '';
        }, 3000);
      } else {
        const error = await response.json();
        document.getElementById('formError').textContent = error.error || 'Erreur lors de l\'enregistrement';
      }
    } catch (error) {
      console.error('Erreur:', error);
      document.getElementById('formError').textContent = 'Erreur de connexion au serveur';
    }
  });

  // Charger les clients au chargement de la page
  loadClients();
</script>
</body>
</html>
